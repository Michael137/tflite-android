def targetFolder = "src/main/assets"
def modelFloatDownloadUrl = "http://download.tensorflow.org/models/mobilenet_v1_2018_02_22/mobilenet_v1_1.0_224.tgz"
def modelQuantDownloadUrl = "http://download.tensorflow.org/models/mobilenet_v1_2018_08_02/mobilenet_v1_1.0_224_quant.tgz"
def modelEfficientNetFloatDownloadUrl = "http://download.tensorflow.org/models/tflite/efficientnet-lite/efficientnet-lite0-fp32_2020_03_03.zip"
def modelEfficientNetQuantDownloadUrl = "http://download.tensorflow.org/models/tflite/efficientnet-lite/efficientnet-lite0-int8_2020_03_03.zip"
//def modelInceptionFloatDownloadUrl = "https://storage.googleapis.com/download.tensorflow.org/models/tflite/model_zoo/upload_20180427/inception_v4_2018_04_27.tgz"
//def modelInceptionQuantDownloadUrl = "https://storage.googleapis.com/download.tensorflow.org/models/inception_v4_299_quant_20181026.tgz"
def localCacheFloat = "build/intermediates/mobilenet_v1_1.0_224.tgz"
def localCacheQuant = "build/intermediates/mobilenet_v1_1.0_224_quant.tgz"
def localCacheEfficientNetFloat = "build/intermediates/efficientnet-lite0-fp32_2020_03_03.zip"
def localCacheEfficientNetQuant = "build/intermediates/efficientnet-lite0-int8_2020_03_03.zip"
//def localCacheInceptionFloat = "build/intermediates/inception_v4_2018_04_27.tgz"
//def localCacheInceptionQuant = "build/intermediates/inception_v4_299_quant_20181026.tgz"

def modelInceptionFloatDownloadUrl = "https://storage.googleapis.com/download.tensorflow.org/models/tflite/model_zoo/upload_20180427/inception_v3_2018_04_27.tgz"
def modelInceptionQuantDownloadUrl = "https://storage.googleapis.com/download.tensorflow.org/models/tflite_11_05_08/inception_v3_quant.tgz"
def localCacheInceptionFloat = "build/intermediates/inception_v3_2018_04_27.tgz"
def localCacheInceptionQuant = "build/intermediates/inception_v3_quant.tgz"



task downloadModelFloat(type: DownloadUrlTask) {
    doFirst {
        println "Downloading ${modelFloatDownloadUrl}"
    }
    sourceUrl = "${modelFloatDownloadUrl}"
    target = file("${localCacheFloat}")
}

task downloadModelQuant(type: DownloadUrlTask) {
    doFirst {
        println "Downloading ${modelQuantDownloadUrl}"
    }
    sourceUrl = "${modelQuantDownloadUrl}"
    target = file("${localCacheQuant}")
}

task downloadEfficientNetFloat(type: DownloadUrlTask) {
    doFirst {
        println "Downloading ${modelEfficientNetFloatDownloadUrl}"
    }
    sourceUrl = "${modelEfficientNetFloatDownloadUrl}"
    target = file("${localCacheEfficientNetFloat}")
}

task downloadEfficientNetQuant(type: DownloadUrlTask) {
    doFirst {
        println "Downloading ${modelEfficientNetQuantDownloadUrl}"
    }
    sourceUrl = "${modelEfficientNetQuantDownloadUrl}"
    target = file("${localCacheEfficientNetQuant}")
}

task downloadInceptionFloat(type: DownloadUrlTask) {
    doFirst {
        println "Downloading ${modelInceptionFloatDownloadUrl}"
    }
    sourceUrl = "${modelInceptionFloatDownloadUrl}"
    target = file("${localCacheInceptionFloat}")
}

task downloadInceptionQuant(type: DownloadUrlTask) {
    doFirst {
        println "Downloading ${modelInceptionQuantDownloadUrl}"
    }
    sourceUrl = "${modelInceptionQuantDownloadUrl}"
    target = file("${localCacheInceptionQuant}")
}

task unzipModelFloat(type: Copy, dependsOn: 'downloadModelFloat') {
    doFirst {
        println "Unzipping ${localCacheFloat}"
    }
    from tarTree("${localCacheFloat}")
    into "${targetFolder}"
}

task unzipModelQuant(type: Copy, dependsOn: 'downloadModelQuant') {
    doFirst {
        println "Unzipping ${localCacheQuant}"
    }
    from tarTree("${localCacheQuant}")
    into "${targetFolder}"
}

task unzipModelEfficientNetFloat(type: Copy, dependsOn: 'downloadEfficientNetFloat') {
    doFirst {
        println "Unzipping ${localCacheEfficientNetFloat}"
    }
    from zipTree("${localCacheEfficientNetFloat}")
    into "${targetFolder}"
}

task unzipModelEfficientNetQuant(type: Copy, dependsOn: 'downloadEfficientNetQuant') {
    doFirst {
        println "Unzipping ${localCacheEfficientNetQuant}"
    }
    from zipTree("${localCacheEfficientNetQuant}")
    into "${targetFolder}"
}

task unzipModelInceptionFloat(type: Copy, dependsOn: 'downloadInceptionFloat') {
    doFirst {
        println "Unzipping ${localCacheInceptionFloat}"
    }
    from tarTree("${localCacheInceptionFloat}")
    into "${targetFolder}"
}

task unzipModelInceptionQuant(type: Copy, dependsOn: 'downloadInceptionQuant') {
    doFirst {
        println "Unzipping ${localCacheInceptionQuant}"
    }
    from tarTree("${localCacheInceptionQuant}")
    into "${targetFolder}"
}

task cleanUnusedFiles(type: Delete, dependsOn: ['unzipModelFloat', 'unzipModelQuant', 'unzipModelEfficientNetFloat', 'unzipModelEfficientNetQuant', 'unzipModelInceptionFloat', 'unzipModelInceptionQuant']) {
    delete fileTree("${targetFolder}").matching {
        include "*.pb"
        include "*.ckpt.*"
        include "*.pbtxt*"
        include "*.quant_info.*"
        include "*.meta"
    }
}

class DownloadUrlTask extends DefaultTask {
    @Input
    String sourceUrl

    @OutputFile
    File target

    @TaskAction
    void download() {
        ant.get(src: sourceUrl, dest: target)
    }
}

preBuild.dependsOn unzipModelFloat
preBuild.dependsOn unzipModelQuant
preBuild.dependsOn unzipModelEfficientNetFloat
preBuild.dependsOn unzipModelEfficientNetQuant
preBuild.dependsOn unzipModelInceptionFloat
preBuild.dependsOn unzipModelInceptionQuant
preBuild.dependsOn cleanUnusedFiles
